üìà Projeto: Simulador de Investimentos
1. Objetivo
Criar uma aplica√ß√£o onde o usu√°rio possa:
‚Ä¢	Inserir valor inicial, aporte mensal, taxa de juros (ao m√™s ou ao ano) e tempo de investimento.
‚Ä¢	Visualizar quanto ter√° acumulado ao final do per√≠odo.
‚Ä¢	Acompanhar a evolu√ß√£o em um gr√°fico de linha ou barras.
‚Ä¢	Comparar diferentes cen√°rios (ex: com e sem aportes).
________________________________________
2. Fluxo do Usu√°rio
1.	Usu√°rio abre a aplica√ß√£o.
2.	Preenche os dados:
o	Valor inicial
o	Aporte mensal
o	Taxa de juros (%)
o	Per√≠odo (meses ou anos)
3.	Clica em "Simular".
4.	O sistema calcula m√™s a m√™s:
o	Juros compostos sobre saldo acumulado.
o	Soma dos aportes mensais.
5.	Mostra:
o	Gr√°fico com a evolu√ß√£o.
o	Resumo num√©rico: valor final, total investido, total de juros.
6.	(Opcional) Permite salvar ou exportar o relat√≥rio em PDF/CSV.
________________________________________
3. Tecnologias Sugeridas (Rodando no Replit)
‚Ä¢	Front-end (interface):
o	HTML + CSS (pode usar TailwindCSS se quiser estilo moderno).
o	JavaScript (puro ou React, se quiser deixar mais profissional).
‚Ä¢	Biblioteca de gr√°ficos:
o	Chart.js (mais simples) ou Recharts (se usar React).
‚Ä¢	Back-end (opcional, se quiser deixar robusto):
o	Node.js + Express para criar uma API que recebe dados e retorna resultados.
o	Mas d√° pra come√ßar 100% no front-end, calculando no navegador.
‚Ä¢	Banco de dados (opcional):
o	Se quiser que o usu√°rio salve simula√ß√µes, pode usar SQLite (mais simples) ou MongoDB (cloud).
o	Mas pode come√ßar sem banco e s√≥ mostrar os c√°lculos na tela.
________________________________________
4. Estrutura do Projeto
/simulador-investimentos
‚îÇ‚îÄ‚îÄ index.html
‚îÇ‚îÄ‚îÄ style.css
‚îÇ‚îÄ‚îÄ script.js  (ou pasta /src se usar React)
‚îÇ‚îÄ‚îÄ /assets    (√≠cones, imagens, etc)
________________________________________
5. F√≥rmula Principal
Usar juros compostos com aportes mensais:
M=P√ó(1+i)n+A√ó(1+i)n‚àí1iM = P \times (1+i)^n + A \times \frac{(1+i)^n - 1}{i}M=P√ó(1+i)n+A√ói(1+i)n‚àí1 
Onde:
‚Ä¢	M = Montante final
‚Ä¢	P = Valor inicial
‚Ä¢	A = Aporte mensal
‚Ä¢	i = taxa de juros (em decimal, ex: 0.01 para 1%)
‚Ä¢	n = n√∫mero de per√≠odos (meses ou anos)
O sistema deve calcular m√™s a m√™s para gerar o gr√°fico.
________________________________________
6. Funcionalidades B√°sicas
‚Ä¢	Input de dados pelo usu√°rio.
‚Ä¢	C√°lculo de juros compostos com aportes.
‚Ä¢	Exibi√ß√£o de gr√°fico da evolu√ß√£o do saldo.
‚Ä¢	Resumo final (total investido x total ganho em juros).
________________________________________
7. Funcionalidades Extras (para destacar no curr√≠culo)
‚Ä¢	Comparar dois cen√°rios lado a lado (ex: 0,5% a.m. vs 1% a.m.).
‚Ä¢	Bot√£o para exportar relat√≥rio (CSV ou PDF).
‚Ä¢	Salvar simula√ß√µes no navegador (LocalStorage).
‚Ä¢	Dark mode üåô
________________________________________
8. Sugest√£o de Stack Inicial no Replit
üëâ Como voc√™ vai usar o Replit, eu sugiro:
‚Ä¢	Vers√£o simples (r√°pida): HTML + CSS + JavaScript + Chart.js
‚Ä¢	Vers√£o robusta (mais profissional): React + TailwindCSS + Recharts
________________________________________
üëâ Esse projeto √© perfeito porque combina:
‚úîÔ∏è Matem√°tica financeira (juros compostos).
‚úîÔ∏è L√≥gica de programa√ß√£o (la√ßos, arrays, c√°lculos).
‚úîÔ∏è Visualiza√ß√£o de dados (gr√°ficos).
‚úîÔ∏è Interface amig√°vel (design).
